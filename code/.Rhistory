library(ragg)
#Download data from NRS website
temp <- tempfile()
url <- "https://www.nrscotland.gov.uk/files//statistics/drug-related-deaths/2019/drug-related-deaths-19-tabs-figs.xlsx"
temp <- curl_download(url=url, destfile=temp, quiet=FALSE, mode="wb")
data <- read_excel(temp, sheet="1 - summary", range="A12:F31", col_names=FALSE) %>%
rename(year=`...1`, DRD=`...4`, LowerCI=`...5`, UpperCI=`...6`) %>%
select(-c(2, 3))
#I'm certain there is a more elegant solution to this, but this works, so ¯\_(ツ)_/¯
n_ribbons <- 10 #This is probably overkill
#Generate the palette
#colfunc <- colorRampPalette(c("DarkRed", "white"))
#Gradpal <- colfunc(n_ribbons)
ribbon_alpha = seq(1,.05,length.out = n_ribbons)
#generate the max/min values for each ribbon
for (i in 1:n_ribbons){
data[paste0("ylo", i)] <- data$DRD-(data$DRD-data$LowerCI)*(i)/n_ribbons
data[paste0("yhi", i)] <- data$DRD+(data$UpperCI-data$DRD)*(i)/n_ribbons
}
#plot the central ribbon
plot <- ggplot()+
geom_line(data=data, aes(x=year, y=DRD), color='navy')+
scale_x_continuous(name="Year")+
scale_y_continuous(limits=c(0,NA), name="Annual Drug-Related Deaths")
#add in the rest
for (i in 10:1) {
plot <- plot+
geom_ribbon(data=data, aes_string(x='year',
ymin=paste0('ylo',i),
ymax=paste0('yhi',i)),
fill='dodgerblue',
alpha=ribbon_alpha[i])
}
#add the central line (if required) and tidy up
plot <- plot+
#geom_line(data=data, aes(x=year, y=DRD), colour="Black")+
theme_classic()+
theme(text=element_text(family="Lato"), plot.title=element_text(face="bold", size=rel(1.4)))+
labs(title="Drug-Related Deaths in Scotland have almost quadrupled in the last 20 years",
subtitle="Centered 5-year rolling average number of Drug-Related Deaths in Scotland with modelled 95% Confidence Intervals",
caption="Data from National Records of Scotland | Plot by @VictimOfMaths")
agg_png("26Trends.png", units="in", width=9, height=7, res=800)
plot
dev.off()
ribbon_alpha
rm(list=ls())
library(tidyverse)
library(curl)
library(readxl)
library(extrafont)
library(ragg)
#Download data from NRS website
temp <- tempfile()
url <- "https://www.nrscotland.gov.uk/files//statistics/drug-related-deaths/2019/drug-related-deaths-19-tabs-figs.xlsx"
temp <- curl_download(url=url, destfile=temp, quiet=FALSE, mode="wb")
data <- read_excel(temp, sheet="1 - summary", range="A12:F31", col_names=FALSE) %>%
rename(year=`...1`, DRD=`...4`, LowerCI=`...5`, UpperCI=`...6`) %>%
select(-c(2, 3))
#I'm certain there is a more elegant solution to this, but this works, so ¯\_(ツ)_/¯
n_ribbons <- 10 #This is probably overkill
#Generate the palette
#colfunc <- colorRampPalette(c("DarkRed", "white"))
#Gradpal <- colfunc(n_ribbons)
ribbon_alpha = seq(1,.05,length.out = n_ribbons)
#generate the max/min values for each ribbon
for (i in 1:n_ribbons){
data[paste0("ylo", i)] <- data$DRD-(data$DRD-data$LowerCI)*(i)/n_ribbons
data[paste0("yhi", i)] <- data$DRD+(data$UpperCI-data$DRD)*(i)/n_ribbons
}
#plot the central ribbon
plot <- ggplot()+
geom_line(data=data, aes(x=year, y=DRD), color='navy')+
scale_x_continuous(name="Year")+
scale_y_continuous(limits=c(0,NA), name="Annual Drug-Related Deaths")
#add in the rest
for (i in 10:1) {
plot <- plot+
geom_ribbon(data=data, aes_string(x='year',
ymin=paste0('ylo',i),
ymax=paste0('yhi',i)),
fill='dodgerblue',
alpha=ribbon_alpha[i])
}
#add the central line (if required) and tidy up
plot <- plot+
geom_line(data=data, aes(x=year, y=DRD), color='navy')+
theme_classic()+
theme(text=element_text(family="Lato"), plot.title=element_text(face="bold", size=rel(1.4)))+
labs(title="Drug-Related Deaths in Scotland have almost quadrupled in the last 20 years",
subtitle="Centered 5-year rolling average number of Drug-Related Deaths in Scotland with modelled 95% Confidence Intervals",
caption="Data from National Records of Scotland | Plot by @VictimOfMaths")
agg_png("26Trends.png", units="in", width=9, height=7, res=800)
plot
dev.off()
rm(list=ls())
library(tidyverse)
library(curl)
library(readxl)
library(extrafont)
library(ragg)
#Download data from NRS website
temp <- tempfile()
url <- "https://www.nrscotland.gov.uk/files//statistics/drug-related-deaths/2019/drug-related-deaths-19-tabs-figs.xlsx"
temp <- curl_download(url=url, destfile=temp, quiet=FALSE, mode="wb")
data <- read_excel(temp, sheet="1 - summary", range="A12:F31", col_names=FALSE) %>%
rename(year=`...1`, DRD=`...4`, LowerCI=`...5`, UpperCI=`...6`) %>%
select(-c(2, 3))
#I'm certain there is a more elegant solution to this, but this works, so ¯\_(ツ)_/¯
n_ribbons <- 9 #This is probably overkill
#Generate the palette
#colfunc <- colorRampPalette(c("DarkRed", "white"))
#Gradpal <- colfunc(n_ribbons)
ribbon_alpha = seq(1,.05,length.out = n_ribbons)
#generate the max/min values for each ribbon
for (i in 1:n_ribbons){
data[paste0("ylo", i)] <- data$DRD-(data$DRD-data$LowerCI)*(i)/n_ribbons
data[paste0("yhi", i)] <- data$DRD+(data$UpperCI-data$DRD)*(i)/n_ribbons
}
#plot the central ribbon
plot <- ggplot()+
geom_line(data=data, aes(x=year, y=DRD), color='navy')+
scale_x_continuous(name="Year")+
scale_y_continuous(limits=c(0,NA), name="Annual Drug-Related Deaths")
#add in the rest
for (i in 10:1) {
plot <- plot+
geom_ribbon(data=data, aes_string(x='year',
ymin=paste0('ylo',i),
ymax=paste0('yhi',i)),
fill= blues9[i],
alpha=ribbon_alpha[i])
}
#add the central line (if required) and tidy up
plot <- plot+
geom_line(data=data, aes(x=year, y=DRD), color='navy')+
theme_classic()+
theme(text=element_text(family="Lato"), plot.title=element_text(face="bold", size=rel(1.4)))+
labs(title="Drug-Related Deaths in Scotland have almost quadrupled in the last 20 years",
subtitle="Centered 5-year rolling average number of Drug-Related Deaths in Scotland with modelled 95% Confidence Intervals",
caption="Data from National Records of Scotland | Plot by @VictimOfMaths")
agg_png("26Trends.png", units="in", width=9, height=7, res=800)
plot
dev.off()
rm(list=ls())
library(tidyverse)
library(curl)
library(readxl)
library(extrafont)
library(ragg)
#Download data from NRS website
temp <- tempfile()
url <- "https://www.nrscotland.gov.uk/files//statistics/drug-related-deaths/2019/drug-related-deaths-19-tabs-figs.xlsx"
temp <- curl_download(url=url, destfile=temp, quiet=FALSE, mode="wb")
data <- read_excel(temp, sheet="1 - summary", range="A12:F31", col_names=FALSE) %>%
rename(year=`...1`, DRD=`...4`, LowerCI=`...5`, UpperCI=`...6`) %>%
select(-c(2, 3))
#I'm certain there is a more elegant solution to this, but this works, so ¯\_(ツ)_/¯
n_ribbons <- 9 #This is probably overkill
#Generate the palette
#colfunc <- colorRampPalette(c("DarkRed", "white"))
#Gradpal <- colfunc(n_ribbons)
ribbon_alpha = seq(1,.05,length.out = n_ribbons)
#generate the max/min values for each ribbon
for (i in 1:n_ribbons){
data[paste0("ylo", i)] <- data$DRD-(data$DRD-data$LowerCI)*(i)/n_ribbons
data[paste0("yhi", i)] <- data$DRD+(data$UpperCI-data$DRD)*(i)/n_ribbons
}
#plot the central ribbon
plot <- ggplot()+
geom_line(data=data, aes(x=year, y=DRD), color='navy')+
scale_x_continuous(name="Year")+
scale_y_continuous(limits=c(0,NA), name="Annual Drug-Related Deaths")
#add in the rest
for (i in n_ribbons:1) {
plot <- plot+
geom_ribbon(data=data, aes_string(x='year',
ymin=paste0('ylo',i),
ymax=paste0('yhi',i)),
fill= blues9[i],
alpha=ribbon_alpha[i])
}
#add the central line (if required) and tidy up
plot <- plot+
geom_line(data=data, aes(x=year, y=DRD), color='navy')+
theme_classic()+
theme(text=element_text(family="Lato"), plot.title=element_text(face="bold", size=rel(1.4)))+
labs(title="Drug-Related Deaths in Scotland have almost quadrupled in the last 20 years",
subtitle="Centered 5-year rolling average number of Drug-Related Deaths in Scotland with modelled 95% Confidence Intervals",
caption="Data from National Records of Scotland | Plot by @VictimOfMaths")
agg_png("26Trends.png", units="in", width=9, height=7, res=800)
plot
dev.off()
rm(list=ls())
library(tidyverse)
library(curl)
library(readxl)
library(extrafont)
library(ragg)
#Download data from NRS website
temp <- tempfile()
url <- "https://www.nrscotland.gov.uk/files//statistics/drug-related-deaths/2019/drug-related-deaths-19-tabs-figs.xlsx"
temp <- curl_download(url=url, destfile=temp, quiet=FALSE, mode="wb")
data <- read_excel(temp, sheet="1 - summary", range="A12:F31", col_names=FALSE) %>%
rename(year=`...1`, DRD=`...4`, LowerCI=`...5`, UpperCI=`...6`) %>%
select(-c(2, 3))
#I'm certain there is a more elegant solution to this, but this works, so ¯\_(ツ)_/¯
n_ribbons <- 9 #This is probably overkill
#Generate the palette
#colfunc <- colorRampPalette(c("DarkRed", "white"))
#Gradpal <- colfunc(n_ribbons)
ribbon_alpha = seq(1,.05,length.out = n_ribbons)
#generate the max/min values for each ribbon
for (i in 1:n_ribbons){
data[paste0("ylo", i)] <- data$DRD-(data$DRD-data$LowerCI)*(i)/n_ribbons
data[paste0("yhi", i)] <- data$DRD+(data$UpperCI-data$DRD)*(i)/n_ribbons
}
#plot the central ribbon
plot <- ggplot()+
geom_line(data=data, aes(x=year, y=DRD), color='navy')+
scale_x_continuous(name="Year")+
scale_y_continuous(limits=c(0,NA), name="Annual Drug-Related Deaths")
#add in the rest
for (i in n_ribbons:1) {
plot <- plot+
geom_ribbon(data=data, aes_string(x='year',
ymin=paste0('ylo',i),
ymax=paste0('yhi',i)),
fill= rev(blues9)[i],
alpha=ribbon_alpha[i])
}
#add the central line (if required) and tidy up
plot <- plot+
geom_line(data=data, aes(x=year, y=DRD), color='navy')+
theme_classic()+
theme(text=element_text(family="Lato"), plot.title=element_text(face="bold", size=rel(1.4)))+
labs(title="Drug-Related Deaths in Scotland have almost quadrupled in the last 20 years",
subtitle="Centered 5-year rolling average number of Drug-Related Deaths in Scotland with modelled 95% Confidence Intervals",
caption="Data from National Records of Scotland | Plot by @VictimOfMaths")
agg_png("26Trends.png", units="in", width=9, height=7, res=800)
plot
dev.off()
library(tidyverse)
library(tidycensus)
??tidycensus
?tidycensus::get_acs
library(tidyverse)
library(tidycensus)
rm(list=ls())
graphics.off()
TX = get_acs(geography='county',
variables = c(medincome = "B19013_001"),
state = "TX",
year = 2019,
geometry=TRUE)
my_api_key = 'e90802bb40c08e84c7ea65ebe1f1f7cf70685bff'
library(tidyverse)
library(tidycensus)
rm(list=ls())
graphics.off()
TX = get_acs(geography='county',
variables = c(medincome = "B19013_001"),
state = "TX",
year = 2019,
geometry=TRUE,
key=my_api_key)
my_api_key = 'e90802bb40c08e84c7ea65ebe1f1f7cf70685bff'
library(tidyverse)
library(tidycensus)
rm(list=ls())
graphics.off()
TX = get_acs(geography='county',
variables = c(medincome = "B19013_001"),
state = "TX",
year = 2019,
geometry=TRUE,
key=my_api_key)
library(tidyverse)
library(tidycensus)
rm(list=ls())
graphics.off()
my_api_key = 'e90802bb40c08e84c7ea65ebe1f1f7cf70685bff'
TX = get_acs(geography='county',
variables = c(medincome = "B19013_001"),
state = "TX",
year = 2019,
geometry=TRUE,
key=my_api_key)
class(TX)
ggplot(data=TX) +
geom_sf()
ggplot(data=TX) +
geom_sf(fill=medincome)
ggplot(data=TX) +
geom_sf(aes(fill=medincome))
library(tidyverse)
library(tidycensus)
rm(list=ls())
graphics.off()
my_api_key = 'e90802bb40c08e84c7ea65ebe1f1f7cf70685bff'
TX = get_acs(geography='county',
variables = c(medincome = "B19013_001"),
state = "TX",
year = 2019,
geometry=TRUE,
key=my_api_key)
ggplot(data=TX) +
geom_sf(aes(fill=medincome))
str(TX)
ggplot(data=TX) +
geom_sf(aes(fill=estimate))
ggplot(data=TX) +
geom_sf(aes(fill=estimate)) +
scale_fill_viridis_c()
ggplot(data=TX) +
geom_sf(aes(fill=estimate)) +
scale_fill_viridis_c() +
ggmap::theme_nothing()
ggplot(data=TX) +
geom_sf(aes(fill=estimate)) +
scale_fill_viridis_c() +
theme_map()
ggplot(data=TX) +
geom_sf(aes(fill=estimate)) +
scale_fill_viridis_c() +
maps::theme_map()
ggplot(data=TX) +
geom_sf(aes(fill=estimate)) +
scale_fill_viridis_c()
ggplot(data=TX) +
geom_sf(aes(fill=estimate)) +
scale_fill_viridis_c() +
theme_minimal()
library(sf)
A = adjacency_matrix(TX)
a = st_touches(TX)
a
A = adjacency_matrix(a)
a = st_touches(TX)
A = adjacency_matrix(a)
a
a[[79]]
N = length(a)
N
a
str(a)
ij = matrix(NA,0,2)
ij = matrix(NA,0,2)
for (ix in seq(a)) {
tmp = cbind(ix, a[[ix]])
ij  = rbind(ij, tmp)
}
ij
dim(if)
dim(ij)
length(unlist(a))
ij = matrix(NA,0,2)
for (ix in seq(a)) {
tmp = cbind(ix, a[[ix]])
ij  = rbind(ij, tmp)
}
keep = ( ij[1] < ij[2] )
ij   = ij[keep,]
ij
dim(ij)
ij = matrix(NA,0,2)
for (ix in seq(a)) {
tmp = cbind(ix, a[[ix]])
ij  = rbind(ij, tmp)
}
keep = ( ij[,1] < ij[,2] )
ij   = ij[keep,]
dim(ij)
ij
head(ij)
length(TX)
length(TX$estimate)
stanInits = function(nchains=1) {
L = vector('list',nchains)
for (i in seq(L)) {
L[[i]] =   list(
theta = runif(length(TX$estimate), min(TX$estimate), max(TX$estimate) )
)
}
return(L)
} # stanInits
stanInits()
stanDataList = list(
N      = length(TX$estimate),
nadj   = nrow(ij),
income = TX$estimate,
ii   = ij[,1],
jj   = ij[,2]
)
stanDataList
rstan:::rstudio_stanc("C:/Users/Carl/Downloads/TX.stan")
rstan:::rstudio_stanc("C:/Users/Carl/Downloads/TX.stan")
rstan:::rstudio_stanc("C:/Users/Carl/Downloads/TX.stan")
rstan:::rstudio_stanc("C:/Users/Carl/Downloads/TX.stan")
rstan:::rstudio_stanc("C:/Users/Carl/Downloads/TX.stan")
rstan:::rstudio_stanc("C:/Users/Carl/Downloads/TX.stan")
rstan:::rstudio_stanc("C:/Users/Carl/Downloads/TX.stan")
eigen(diag(6))
A = diag(6)
A = A + runif(36,-.1,.1)
A
A = round(A,1)
A
A = diag(6)
A = A + runif(36,-.1,.1)
A = round(A,2)
A
eigen(A)
A = pmax(A,0)
A
eigen(A)
e = eigen(A)
e$vectors[,1]
e$vectors[,1] %>% plot()
plot(e$vectors[,1], type='h')
plot(e$vectors[,1], type='h')
plot(Re(e$vectors[,1]), type='h')
plot(Re(e$vectors[,1]), type='h', ylim=c(0,-1))
plot(Re(e$vectors[,1]), type='h', ylim=c(-1,0))
diag(c(1:3,3:1))
e = eigen( diag(c(1:3,3:1)))
e
alogit = function(x) 1/(1+exp(-x))
alogit(-14)
round( alogit(-14), 6)
alogit(-22)
logit = function(p) log(p/(1-p))
logit(1e-8)
logit(1e-7)
logit(1e-6)
logit(1e-9)
logit(1e-12)
logit(1e-11)
logit(1e-10)
logit = function(p) log(p/(1-p))
logit(1e-7)
library(tidyverse)
url = 'https://github.com/kjhealy/us_births/blob/master/data/usa_birth_1933-2015.csv'
D = read_csv(url)
library(tidyverse)
url = 'https://raw.githubusercontent.com/kjhealy/us_births/master/data/usa_birth_1933-2015.csv'
D = read_csv(url)
D
head(D,20)
D = read_csv(url) %>%
filter(Month=='TOT')
D
D
D = read_csv(url) %>%
filter(Month=='TOT') %>%
select(Year,Births)
D
ggplot(data=D) +
aes(x=Year,y=Births) +
geom_point()
ggplot(data=D) +
aes(x=Year,y=Births) +
geom_point() +
geom_line() +
theme_bw()
ggplot(data=D) +
aes(x=Year,y=Births) +
geom_point() +
geom_line() +
theme_bw() +
scale_y_continuous(limits=c(0,4.2e6))
ggplot(data=D) +
aes(x=Year,y=Births) +
geom_point() +
geom_line() +
theme_bw() +
scale_y_continuous(limits=c(0,4.5e6))
ggplot(data=D) +
aes(x=Year,y=Births) +
geom_point() +
geom_line() +
theme_bw() +
scale_y_continuous(limits=c(0,4.5e6),breaks=NULL)
ggplot(data=D) +
geom_segment(aes(x=Year,y=0,xend=Year,yend=Births),
color='blue') +
theme_bw() +
scale_y_continuous(limits=c(0,4.5e6),breaks=NULL)
ggplot(data=D) +
geom_segment(aes(x=Year,y=0,xend=Year,yend=Births),
color='blue') +
theme_bw() +
theme(axis.ticks.x = element_blank(),
axis.text.x = element_blank())
scale_y_continuous(limits=c(0,4.5e6),breaks=NULL)
ggplot(data=D) +
geom_segment(aes(x=Year,y=0,xend=Year,yend=Births),
color='blue') +
theme_bw() +
theme(axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.title.x = element_blank()) +
scale_y_continuous(limits=c(0,4.5e6),breaks=NULL)
ggplot(data=D) +
geom_segment(aes(x=Year,y=0,xend=Year,yend=Births),
color='blue') +
theme_bw() +
theme(axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.title = element_blank()) +
scale_y_continuous(limits=c(0,4.5e6),breaks=NULL)
setwd("D:/Carl/Documents/GitHub/D-spline-replication/code")
setwd("~/GitHub/D-spline-replication/code")
